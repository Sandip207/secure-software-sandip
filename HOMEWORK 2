C Guidelines
1. Avoid Using gets () (MSC34-C)
Problem: gets () reads input without checking length, which can cause memory errors.
Solution: Use fgets () instead, which limits input size.
Correct Code:
c
Copyedit
#include <stdio.h>

int main() {
    char name[20];
    printf("Enter your name: ");
    fgets(name, sizeof(name), stdin);
    printf("Hello, %s", name);
    return 0;
}
Incorrect Code:
c
CopyEdit
char name[20];
gets(name);  // Unsafe, can overwrite memory

2. Do Not Use Freed Memory (MEM30-C)
Problem: Using memory after free() can crash the program.
Solution: After free(), set the pointer to NULL so it cannot be used again.
Correct Code:
c
CopyEdit
#include <stdlib.h>

int main() {
    int *ptr = malloc(sizeof(int) * 5);
    if (ptr) {
        free(ptr);
        ptr = NULL;  // Safe practice
    }
    return 0;
}
Incorrect Code:
c
CopyEdit
int *ptr = malloc(sizeof(int) * 5);
free(ptr);
*ptr = 10;  // Unsafe, accessing freed memory

3. Use strncpy() Instead of strcpy() (STR31-C)
Problem: strcpy() does not check size, leading to buffer overflow.
Solution: Use strncpy() and manually add a null character at the end.
Correct Code:
c
CopyEdit
#include <string.h>
#include <stdio.h>

int main() {
    char dest[10];
    char src[] = "Hello!";
    strncpy(dest, src, sizeof(dest) - 1);
    dest[sizeof(dest) - 1] = '\0';
    printf("%s\n", dest);
    return 0;
}
Incorrect Code:
c
CopyEdit
char dest[10];
char src[] = "HelloHelloHello";
strcpy(dest, src);  // Unsafe, can overwrite memory
