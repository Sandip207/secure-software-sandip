#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#define INITIAL_CAPACITY 4
typedef struct {
 bool success;
 char *value;
 const char *error;
} StackResponse;
typedef struct {
 char **data;
 size_t size;
 size_t capacity;
} StringStack;
StringStack *stack_create() {
 StringStack *stack = malloc(sizeof(StringStack));
 if (!stack) {
 return NULL;
 }
 stack->data = malloc(INITIAL_CAPACITY * sizeof(char *));
 if (!stack->data) {
 free(stack);
 return NULL;
 }
 stack->size = 0;
 stack->capacity = INITIAL_CAPACITY;
 return stack;
}
void stack_destroy(StringStack *stack) {
 if (!stack) return;
 for (size_t i = 0; i < stack->size; i++) {
 free(stack->data[i]);
 }
 free(stack->data);
 free(stack);
}
static bool stack_expand(StringStack *stack) {
 size_t new_capacity = stack->capacity * 2;
 char **new_data = realloc(stack->data, new_capacity * sizeof(char *));
 if (!new_data) return false;
 stack->data = new_data;
 stack->capacity = new_capacity;
 return true;
}
StackResponse stack_push(StringStack *stack, const char *str) {
 if (!stack || !str) {
 return (StackResponse){false, NULL, "Invalid input"};
 }
 if (stack->size == stack->capacity && !stack_expand(stack)) {
 return (StackResponse){false, NULL, "Failed to expand stack"};
 }
 stack->data[stack->size] = strdup(str);
 if (!stack->data[stack->size]) {
 return (StackResponse){false, NULL, "Memory allocation failed"};
 }
 stack->size++;
 return (StackResponse){true, NULL, NULL};
}
StackResponse stack_pop(StringStack *stack) {
 if (!stack || stack->size == 0) {
 return (StackResponse){false, NULL, "Stack is empty"};
 }
 char *popped = stack->data[--stack->size];
 return (StackResponse){true, popped, NULL};
}
StackResponse stack_peek(const StringStack *stack) {
 if (!stack || stack->size == 0) {
 return (StackResponse){false, NULL, "Stack is empty"};
 }
 return (StackResponse){true, stack->data[stack->size - 1], NULL};
}
bool stack_is_empty(const StringStack *stack) {
 return stack && stack->size == 0;
}
int main() {
 StringStack *stack = stack_create();
 if (!stack) {
 printf("Error: Could not initialize stack.\n");
 return EXIT_FAILURE;
 }

 stack_push(stack, "First");
 stack_push(stack, "Second");
 stack_push(stack, "Third");
 StackResponse res = stack_pop(stack);
 if (res.success) {
 printf("Popped: %s\n", res.value);
 free(res.value);
 } else {
 printf("Error: %s\n", res.error);
 }
 stack_destroy(stack);
 return EXIT_SUCCESS;
}
